#include "lexical_analizer.h"
static int isKeyword(char buffer[])
{
    char keywords[32][10] = {"auto","break","case","char","const","continue","default",
                             "do","double","else","enum","extern","float","for","goto",
                             "if","int","long","register","return","short","signed",
                             "sizeof","static","struct","switch","typedef","union",
                             "unsigned","void","volatile","while"
                            };
    int i, flag = 0;
    for(i = 0; i < 32; ++i)
    {
        if(strcmp(keywords[i], buffer) == 0)
        {
            flag = 1;
            break;
        }
    }
    return flag;
}


unsigned char exp[50];

void lexical_analyzer()
{
    int k=0;
    string args;
    cout<<"enter the name of your file: ";
    cin>>args;
    char ch, buffer[15], operators[] = "+-*/%=";
    ifstream fin(args);
    int i,j=0;
    if(!fin.is_open())
    {
        cout<<"error while opening the file\n";
        exit(0);
    }
    while(!fin.eof())
    {
        ch = fin.get();
        bool flag =true;
        for(i = 0; i < 6; ++i)
        {
            if(ch == operators[i])
            {
                flag = false;
                cout<<ch<<" is operator\n";
                exp[k]=0;
                k++;
            }
        }
        if(isalnum(ch))
        {
            buffer[j++] = ch;
        }
        else if((ch == ' ' || ch == '\n'||flag == false ) && (j != 0))
        {
            buffer[j] = '\0';
            j = 0;
            if(isKeyword(buffer) == 1)
                cout<<buffer<<" is keyword\n";
            else
            {
                cout<<buffer<<" is indentifier\n";
                exp[k]=1;
                k++;
            }
        }
    }
    fin.close();
    exp[k]=2;
}
